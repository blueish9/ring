package org.ring.orm.parser;

import org.ring.dml.transaction.save.AbstractPersistence;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;

/**
 * Created by quanle on 6/21/2017.
 */
public class PersistenceParser
{
    private static HashMap<String, Constructor<AbstractPersistence>> handlerMap = new HashMap<>();

    public static void parse(NodeList persistenceNode)
    {
        try
        {
            for (int i = 0; i < persistenceNode.getLength(); i++)
            {
                Node function = persistenceNode.item(i);
                if (function.getNodeType() == Node.ELEMENT_NODE)
                {
                    Class<AbstractPersistence> type = (Class<AbstractPersistence>) Class.forName(function.getTextContent());
                    Constructor<AbstractPersistence> constructor = type.getConstructor();
                    handlerMap.put(((Element) function).getTagName(), constructor);
                }
            }
        }
        catch (ClassNotFoundException | NoSuchMethodException e)
        {
            e.printStackTrace();
        }
    }

    public static AbstractPersistence getHandler(boolean autoGeneratedId) throws IllegalAccessException, InvocationTargetException, InstantiationException
    {
        if (autoGeneratedId)
        {
            return handlerMap.get("auto-generated-id").newInstance();
        }
        return handlerMap.get("manually-preset-id").newInstance();
    }
}

package org.ring.dml.transaction.save.impl;

import org.ring.dml.transaction.save.converter.IdConverter;
import org.ring.dml.transaction.save.AbstractPersistence;
import org.ring.orm.OrmFactory;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;

/**
 * Created by quanle on 6/2/2017.
 */
public class BatchPersistence extends AbstractPersistence
{
    public void execute(Connection connection)
    {
        try
        {
            // prepare
            PreparedStatement updateStatement = mapper.getUpdateStatement(connection);
            PreparedStatement existStatement = mapper.getExistStatement(connection);
            PreparedStatement insertStatement = mapper.getInsertStatement(connection);

            // traverseAll, setInsertParameter, setInsertParameter
            ArrayList insertList = new ArrayList();
            for (Object item : dataSet)
            {
                Object id = mapper.getId(item);
                if (id != null)
                {
                    if (isExist(existStatement, id))
                    {
                        setUpdateParameter(updateStatement, item, id);
                    }
                    else
                    {
                        setInsertParameter(insertStatement, item);
                        insertStatement.addBatch();
                        insertList.add(item);
                    }
                }
                else        // id == null and autoGenerated == false (due to pre-check)
                {
                    setInsertParameter(insertStatement, item);
                    insertStatement.addBatch();
                    insertList.add(item);
                }
            }

            // execute insert before update
            int[] rowCount = insertStatement.executeBatch();
            if (mapper.isIdAutoGenerated() && rowCount.length == insertList.size())
            {
                Iterator iterator = insertList.iterator();
                ResultSet rs = insertStatement.getGeneratedKeys();
                if (rs.isBeforeFirst())
                {
                    Field idField = mapper.getIdField();
                    IdConverter converter = OrmFactory.getIdConverter();
                    while (rs.next())
                    {
                        Object newId = rs.getObject(1);
                        Object item = iterator.next();
                        converter.setId(item, idField, newId);
                    }
                }
                rs.close();
            }
            else
            {
                // rollback
            }

            updateStatement.executeBatch();

            insertStatement.close();
            updateStatement.close();
        }
        catch (SQLException | IllegalAccessException e)
        {
            e.printStackTrace();
        }
    }
}


 /*   public void updateForeignKey(Connection connection)
    {
        try
        {
            PreparedStatement statement = mapper.getUpdateForeignKeyStatement(connection);
            if (statement != null)
            {
                boolean ignoreBatch;
                Mapper memberMapper;
                Object foreignKey;
                Field[] fields = mapper.getForeignKeys();
                for (Object item : dataSet)
                {
                    ignoreBatch  = false;
                    for (int i = 0; i < fields.length; ++i)
                    {
                        foreignKey = fields[i].get(item);
                        if (foreignKey != null)
                        {
                            memberMapper = EntityManager.getMapper(foreignKey.getClass());
                            statement.setObject(i + 1, memberMapper.getId(foreignKey));
                        }
                        else
                        {
                            ignoreBatch = true;
                            break;
                        }
                    }

                    if (ignoreBatch)
                    {
                        partialUpdate(connection, item);
                    }
                    else
                    {
                        statement.setObject(fields.length + 1, mapper.getId(item));
                        statement.setInsertParameter();
                    }
                }
                statement.executeBatch();
                statement.close();
            }
        }
        catch (SQLException | IllegalAccessException e)
        {
            e.printStackTrace();
        }
    }


    private void partialUpdate(Connection connection, Object data) throws SQLException, IllegalAccessException
    {
        String update = "update " + mapper.getTable() + " dataSet ";
        for (Field field : mapper.getForeignKeys())
        {
            if (field.get(data) != null)
            {
                dataSet +=
            }
        }
        update = String.format();

        PreparedStatement statement = connection.prepareStatement(update);
        statement.setObject();
        statement.executeUpdate();
        statement.close();
    }*/




 /*   public void executeInsert(Connection connection)
    {
        try
        {
            // prepare
            PreparedStatement insertStatement = mapper.getInsertStatement(connection);

            // traverseAll, setInsertParameter, setInsertParameter
            insertList = new HashSet<>();
            for (Object item : dataSet)
            {
                Object id = mapper.getId(item);
                if (id != null)
                {
                    if (!isExist(existStatement, id))
                    {
                        insertStatement = setInsertParameter(insertStatement, item, (statement, idIndex, idValue) ->
                        {
                            // do nothing
                        });
                        insertList.add(item);
                    }
                }
                else        // id == null and autoGenerated == false (due to pre-check)
                {
                    insertStatement = setInsertParameter(insertStatement, item, (statement, idIndex, idValue) ->
                    {
                        // do nothing
                    });
                    insertList.add(item);
                }
            }

            // preSet
            int[] rowCount = insertStatement.executeBatch();
            if (mapper.isIdAutoGenerated() && rowCount.length == insertList.size())
            {
                Iterator iterator = insertList.iterator();
                ResultSet rs = insertStatement.getGeneratedKeys();
                while (rs.next())
                {
                    Object newId = rs.getObject(1);
                    Object item = iterator.next();
                    mapper.getIdField().dataSet(item, newId);
                }
                rs.close();
            }
            else
            {
                // rollback
            }
            insertStatement.close();
        }
        catch (SQLException | IllegalAccessException e)
        {
            e.printStackTrace();
        }
    }

    public void executeUpdate(Connection connection)
    {
        try
        {
            // prepare
            PreparedStatement updateStatement = mapper.getUpdateStatement(connection);

            // traverseAll, setInsertParameter, setInsertParameter
            HashSet<Object> updateList = new HashSet<>(dataSet);
            updateList.removeAll(insertList);
            for (Object item : updateList)
            {
                Object id = mapper.getId(item);
                if (id != null)
                {
                    if (isExist(existStatement, id))
                    {
                        updateStatement = setInsertParameter(updateStatement, item, (statement, idIndex, idValue) ->
                        {
                            try
                            {
                                statement.setObject(idIndex, idValue);
                            }
                            catch (SQLException e)
                            {
                                e.printStackTrace();
                            }
                        });
                    }
                }
            }

            // preSet
            updateStatement.executeBatch();
            updateStatement.close();
        }
        catch (SQLException | IllegalAccessException e)
        {
            e.printStackTrace();
        }
    }*/
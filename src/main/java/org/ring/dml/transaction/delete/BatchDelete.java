package org.ring.dml.transaction.delete;

import org.ring.dml.transaction.Division;
import org.ring.entity.EntityManager;
import org.ring.entity.Mapper;
import org.ring.exception.InvalidDataException;
import org.ring.meta.annotation.relationship.OneToMany;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Created by quanle on 6/3/2017.
 */
public class BatchDelete extends Division
{
    Mapper mapper;

    public BatchDelete(Mapper mapper)
    {
        super();
        this.mapper = mapper;
    }

    public boolean add(Object data) throws IllegalAccessException, InvalidDataException
    {
        /* validate --> pre-check will guarantee that        *
        * id field with 'autoGenerated = false' must have non-null value
        * */
        if (mapper.getId(data) == null)
        {
            throw new InvalidDataException("Id must not null");
        }

        return dataSet.add(data);
    }

    public void removeForeignKey(Connection connection)
    {
        try
        {
            Field[] foreignKeys = mapper.getForeignKeys();
            if (foreignKeys.length > 0)
            {
                PreparedStatement statement = mapper.getUpdateNull(connection);
                for (Object item : dataSet)
                {
                    statement.setObject(1, mapper.getId(item));
                    statement.addBatch();
                }
                statement.executeBatch();
                statement.close();
            }
        }
        catch (SQLException | IllegalAccessException e)
        {
            e.printStackTrace();
        }
    }

    public void execute(Connection connection)
    {
        try
        {
            for (Field field : mapper.getMembers(OneToMany.class))
            {
                OneToMany association = field.getAnnotation(OneToMany.class);
                String rcTable = EntityManager.getTable(association.entity());
                String dml = String.format("delete from %s where %s = ?", rcTable, association.referencedColumn());
                PreparedStatement statement = connection.prepareStatement(dml);
                for (Object item : dataSet)
                {
                    statement.setObject(1, mapper.getId(item));
                    statement.addBatch();
                }
                statement.executeBatch();
                statement.close();
            }

            PreparedStatement statement = mapper.getDeleteStatement(connection);
            for (Object item : dataSet)
            {
                statement.setObject(1, mapper.getId(item));
                statement.addBatch();
            }
            statement.executeBatch();
            statement.close();

        }
        catch (SQLException | IllegalAccessException e)
        {
            e.printStackTrace();
        }
    }
}
